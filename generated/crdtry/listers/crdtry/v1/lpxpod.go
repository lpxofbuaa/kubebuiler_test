/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "kubebuilder.test/crdtry/api/crdtry/v1"
)

// LpxpodLister helps list Lpxpods.
// All objects returned here must be treated as read-only.
type LpxpodLister interface {
	// List lists all Lpxpods in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Lpxpod, err error)
	// Lpxpods returns an object that can list and get Lpxpods.
	Lpxpods(namespace string) LpxpodNamespaceLister
	LpxpodListerExpansion
}

// lpxpodLister implements the LpxpodLister interface.
type lpxpodLister struct {
	indexer cache.Indexer
}

// NewLpxpodLister returns a new LpxpodLister.
func NewLpxpodLister(indexer cache.Indexer) LpxpodLister {
	return &lpxpodLister{indexer: indexer}
}

// List lists all Lpxpods in the indexer.
func (s *lpxpodLister) List(selector labels.Selector) (ret []*v1.Lpxpod, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Lpxpod))
	})
	return ret, err
}

// Lpxpods returns an object that can list and get Lpxpods.
func (s *lpxpodLister) Lpxpods(namespace string) LpxpodNamespaceLister {
	return lpxpodNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LpxpodNamespaceLister helps list and get Lpxpods.
// All objects returned here must be treated as read-only.
type LpxpodNamespaceLister interface {
	// List lists all Lpxpods in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Lpxpod, err error)
	// Get retrieves the Lpxpod from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Lpxpod, error)
	LpxpodNamespaceListerExpansion
}

// lpxpodNamespaceLister implements the LpxpodNamespaceLister
// interface.
type lpxpodNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Lpxpods in the indexer for a given namespace.
func (s lpxpodNamespaceLister) List(selector labels.Selector) (ret []*v1.Lpxpod, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Lpxpod))
	})
	return ret, err
}

// Get retrieves the Lpxpod from the indexer for a given namespace and name.
func (s lpxpodNamespaceLister) Get(name string) (*v1.Lpxpod, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("lpxpod"), name)
	}
	return obj.(*v1.Lpxpod), nil
}
